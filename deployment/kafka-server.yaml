---
apiVersion: v1
kind: Service
metadata:
  name: kafka-server
spec:
  selector:
    app: kafka
  ports:
    - protocol: TCP
      port: 9092
      targetPort: 9092

---
apiVersion: v1
kind: ConfigMap
data:
  KAFKA_ZOOKEEPER_HOST: zookeeper-server:2181
  KAFKA_BROKER: "kafka-server:9092"
  KAFKA_BROKER_ID: "0"
  KAFKA_INTERNAL_LISTENERS: PLAINTEXT://:9092
  KAFKA_EXTERNAL_LISTENERS: PLAINTEXT://kafka-server:9092
  KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
  KAFKA_DELETE_TOPICS_ENABLE: "true"
  KAFKA_CREATE_TOPICS: "locations:1:1"
  KAFKA_LOCATION_SVC_TOPIC: "locations"
metadata:
  name: kafka-config

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: kafka
  name: kafka-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      initContainers:
        - name: init-zookeeper
          image: busybox:1.28
          command:
            [
              "sh",
              "-c",
              'result=1; until [ ${result} -eq 0 ]; do OK=$(echo ruok | nc -w 1 zookeeper-server.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local 2181); if [ "${OK}" == "imok" ]; then result=0; echo "zookeeper returned imok!"; else echo waiting for zookeeper service..; sleep 1; fi; done; echo "[OK] zookeeper is ready"',
            ]
      containers:
        - name: broker
          image: wurstmeister/kafka
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9092
          resources:
            limits:
              memory: "512Mi"
              cpu: "500m"
          readinessProbe:
            tcpSocket:
              port: 9092
            initialDelaySeconds: 35
            timeoutSeconds: 5
          env:
            - name: KAFKA_BROKER_ID
              valueFrom:
                configMapKeyRef:
                  name: kafka-config
                  key: KAFKA_BROKER_ID

            - name: KAFKA_ZOOKEEPER_CONNECT
              valueFrom:
                configMapKeyRef:
                  name: kafka-config
                  key: KAFKA_ZOOKEEPER_HOST

            - name: KAFKA_LISTENERS
              valueFrom:
                configMapKeyRef:
                  name: kafka-config
                  key: KAFKA_INTERNAL_LISTENERS

            - name: KAFKA_ADVERTISED_LISTENERS
              valueFrom:
                configMapKeyRef:
                  name: kafka-config
                  key: KAFKA_EXTERNAL_LISTENERS

            - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
              valueFrom:
                configMapKeyRef:
                  name: kafka-config
                  key: KAFKA_AUTO_CREATE_TOPICS_ENABLE

            - name: KAFKA_CREATE_TOPICS
              valueFrom:
                configMapKeyRef:
                  name: kafka-config
                  key: KAFKA_CREATE_TOPICS

            - name: KAFKA_DELETE_TOPICS_ENABLE
              valueFrom:
                configMapKeyRef:
                  name: kafka-config
                  key: KAFKA_DELETE_TOPICS_ENABLE
